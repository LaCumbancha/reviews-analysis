#!/usr/bin/env python3

import sys
import yaml

input_yaml_file = open("./scripts/system-config.yaml")
input_yaml = yaml.load(input_yaml_file, Loader=yaml.FullLoader)

reviews_inputs = 2 if input_yaml['reviews_streaming'] else 1

file = {}

#### VERSION
file['version'] = '3'

#### SERVICES
file['services'] = {}

# Services dependencies
# SINK_DEPS = ['rabbitmq']
SINK_DEPS = ['mock_receiver0']
HISTOPRE_DEPS = ['sink']
TOPUSERPRE_DEPS = ['sink']
FUNCITPRE_DEPS = ['sink']
BESTUSERPRE_DEPS = ['sink']

FUNCITJOIN_DEPS = []
BESTUSERJOIN_DEPS = []

FUNBIZAGG_DEPS = []
USERAGG_DEPS = []
HASHAGG_DEPS = []
DISHASHAGG_DEPS = []
WEEKDAYAGG_DEPS = []
FUNCITAGG_DEPS = []
STARSAGG_DEPS = []

FUNBIZFIL_DEPS = []
FUNCITFIL_DEPS = []
USERFIL_DEPS = []
STARSFIL_DEPS = []
DISHASHFIL_DEPS = ['sink']

USERMAP_DEPS = []
STARSMAP_DEPS = []
HASHMAP_DEPS = []
FUNBIZMAP_DEPS = []
CITBIZMAP_DEPS = []
WEEKDAYMAP_DEPS = []

BIZSCA_DEPS = []
RVWSCA_DEPS = []

file['services']['rabbitmq'] = {
	'container_name': f'rabbitmq',
	'image': 'rabbitmq:custom',
	'ports': ['15672:15672'],
	'networks': ['testing_net'],
	'logging': {
		'driver': 'none'
	},
	'healthcheck': {
		'test': '''["CMD", "curl", "-f", "http://rabbitmq:156722]''',
		'interval': '10s',
		'timeout': '5s',
		'retries': '10'
	}
}




# TODO: Remove mocks
file['services']['mock_receiver0'] = {
	'container_name': 'mock_receiver0',
	'image': 'mock_receiver:latest',
	'entrypoint': '/receiver',
	'restart': 'on-failure',
	'environment': ['MOCK_TYPE=QUEUE', 'MOCK_RABBITMQ_IP=rabbitmq', 'MOCK_RABBITMQ_PORT=5672', 'MOCK_QUEUE=BotUserAggregator'],
	'links': ['rabbitmq'],
	'depends_on': ['rabbitmq'],
	'networks': ['testing_net']
}

#file['services']['mock_receiver0'] = {
#	'container_name': 'mock_receiver0',
#	'image': 'mock_receiver:latest',
#	'entrypoint': '/receiver',
#	'restart': 'on-failure',
#	'environment': ['MOCK_TYPE=DIRECT', 'MOCK_RABBITMQ_IP=rabbitmq', 'MOCK_RABBITMQ_PORT=5672', 'MOCK_EXCHANGE=BotUserAggregator', 'MOCK_TOPIC=0'],
#	'links': ['rabbitmq'],
#	'depends_on': ['rabbitmq'],
#	'networks': ['testing_net']
#}
#
#file['services']['mock_receiver1'] = {
#	'container_name': 'mock_receiver1',
#	'image': 'mock_receiver:latest',
#	'entrypoint': '/receiver',
#	'restart': 'on-failure',
#	'environment': ['MOCK_TYPE=DIRECT', 'MOCK_RABBITMQ_IP=rabbitmq', 'MOCK_RABBITMQ_PORT=5672', 'MOCK_EXCHANGE=BotUserAggregator', 'MOCK_TOPIC=1'],
#	'links': ['rabbitmq'],
#	'depends_on': ['rabbitmq'],
#	'networks': ['testing_net']
#}

















## Sink
file['services']['sink'] = {
	'container_name': 'sink',
	'image': 'sink:latest',
	'entrypoint': '/sink',
	'restart': 'on-failure',
	'environment': ['SINK_RABBITMQ_IP=rabbitmq', 'SINK_RABBITMQ_PORT=5672'],
	'links': ['rabbitmq'],
	'depends_on': list(SINK_DEPS),
	'networks': ['testing_net']
}

## Funniest Cities flow
FUNCITFIL_DEPS += ['top_funniest_cities_prettier']
file['services']['top_funniest_cities_prettier'] = {
	'container_name': 'top_funniest_cities_prettier',
	'image': 'top_funniest_cities_prettier:latest',
	'entrypoint': '/prettier',
	'restart': 'on-failure',
	'environment': ['FUNCITPRE_RABBITMQ_IP=rabbitmq', 'FUNCITPRE_RABBITMQ_PORT=5672', f'FUNCITPRE_FUNCIT_FILTERS={input_yaml["funcit_filters"]}'],
	'links': ['rabbitmq'],
	'depends_on': list(FUNCITPRE_DEPS),
	'networks': ['testing_net']
}

for idx in range(0, input_yaml['funcit_filters']):
	container_name = f'funcit_filter{idx}'
	FUNCITAGG_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'funcit_filter:latest',
		'entrypoint': '/filter',
		'restart': 'on-failure',
		'environment': [f'FUNCITFIL_INSTANCE={idx}', 'FUNCITFIL_RABBITMQ_IP=rabbitmq', 'FUNCITFIL_RABBITMQ_PORT=5672', f'FUNCITFIL_FUNCIT_AGGREGATORS={input_yaml["funcit_aggregators"]}'],
		'links': ['rabbitmq'],
		'depends_on': list(FUNCITFIL_DEPS),
		'networks': ['testing_net']
	}

for idx in range(0, input_yaml['funcit_aggregators']):
	container_name = f'funcit_aggregator{idx}'
	FUNCITJOIN_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'funcit_aggregator:latest',
		'entrypoint': '/aggregator',
		'restart': 'on-failure',
		'environment': [f'FUNCITAGG_INSTANCE={idx}', 'FUNCITAGG_RABBITMQ_IP=rabbitmq', 'FUNCITAGG_RABBITMQ_PORT=5672', f'FUNCITAGG_FUNCIT_JOINERS={input_yaml["funcit_joiners"]}', f'FUNCITAGG_FUNCIT_FILTERS={input_yaml["funcit_filters"]}', f'FUNCITAGG_INPUT_TOPIC={idx}'],
		'links': ['rabbitmq'],
		'depends_on': list(FUNCITAGG_DEPS),
		'networks': ['testing_net']
	}

for idx in range(0, input_yaml['funcit_joiners']):
	container_name = f'funcit_joiner{idx}'
	CITBIZMAP_DEPS += [container_name]
	FUNBIZAGG_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'funcit_joiner:latest',
		'entrypoint': '/joiner',
		'restart': 'on-failure',
		'environment': [f'FUNCITJOIN_INSTANCE={idx}', 'FUNCITJOIN_RABBITMQ_IP=rabbitmq', 'FUNCITJOIN_RABBITMQ_PORT=5672', f'FUNCITJOIN_FUNBIZ_AGGREGATORS={input_yaml["funbiz_aggregators"]}', f'FUNCITJOIN_CITBIZ_MAPPERS={input_yaml["citbiz_mappers"]}', f'FUNCITJOIN_FUNCIT_AGGREGATORS={input_yaml["funcit_aggregators"]}', f'FUNCITJOIN_INPUT_TOPIC={idx}'],
		'links': ['rabbitmq'],
		'depends_on': list(FUNCITJOIN_DEPS),
		'networks': ['testing_net']
	}

for idx in range(0, input_yaml['citbiz_mappers']):
	container_name = f'citbiz_mapper{idx}'
	BIZSCA_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'citbiz_mapper:latest',
		'entrypoint': '/mapper',
		'restart': 'on-failure',
		'environment': [f'CITBIZMAP_INSTANCE={idx}', 'CITBIZMAP_RABBITMQ_IP=rabbitmq', 'CITBIZMAP_RABBITMQ_PORT=5672', 'CITBIZMAP_BUSINESSES_INPUTS=1', f'CITBIZMAP_FUNCIT_JOINERS={input_yaml["funcit_joiners"]}'],
		'links': ['rabbitmq'],
		'depends_on': list(CITBIZMAP_DEPS),
		'networks': ['testing_net']
	}

file['services']['biz_scatter'] = {
	'container_name': 'biz_scatter',
	'image': 'biz_scatter:latest',
	'entrypoint': '/scatter',
	'restart': 'on-failure',
	'environment': ['BIZSCA_BUSINESS_DATA=/data/test-business.json', 'BIZSCA_RABBITMQ_IP=rabbitmq', 'BIZSCA_RABBITMQ_PORT=5672', f'BIZSCA_CITBIZ_MAPPERS={input_yaml["citbiz_mappers"]}'],
	'links': ['rabbitmq'],
	'depends_on': list(BIZSCA_DEPS),
	'networks': ['testing_net'],
	'volumes': ['business_dataset:/data']
}

for idx in range(0, input_yaml['funbiz_aggregators']):
	container_name = f'funbiz_aggregator{idx}'
	FUNBIZFIL_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'funbiz_aggregator:latest',
		'entrypoint': '/aggregator',
		'restart': 'on-failure',
		'environment': [f'FUNBIZAGG_INSTANCE={idx}', 'FUNBIZAGG_RABBITMQ_IP=rabbitmq', 'FUNBIZAGG_RABBITMQ_PORT=5672', f'FUNBIZAGG_FUNBIZ_FILTERS={input_yaml["funbiz_filters"]}', f'FUNBIZAGG_FUNCIT_JOINERS={input_yaml["funcit_joiners"]}', f'FUNBIZAGG_INPUT_TOPIC={idx}'],
		'links': ['rabbitmq'],
		'depends_on': list(FUNBIZAGG_DEPS),
		'networks': ['testing_net']
	}

for idx in range(0, input_yaml['funbiz_filters']):
	container_name = f'funbiz_filter{idx}'
	FUNBIZMAP_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'funbiz_filter:latest',
		'entrypoint': '/filter',
		'restart': 'on-failure',
		'environment': [f'FUNBIZFIL_INSTANCE={idx}', 'FUNBIZFIL_RABBITMQ_IP=rabbitmq', 'FUNBIZFIL_RABBITMQ_PORT=5672', f'FUNBIZFIL_FUNBIZ_MAPPERS={input_yaml["funbiz_mappers"]}', f'FUNBIZFIL_FUNBIZ_AGGREGATORS={input_yaml["funbiz_aggregators"]}'],
		'links': ['rabbitmq'],
		'depends_on': list(FUNBIZFIL_DEPS),
		'networks': ['testing_net']
	}

for idx in range(0, input_yaml['funbiz_mappers']):
	container_name = f'funbiz_mapper{idx}'
	RVWSCA_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'funbiz_mapper:latest',
		'entrypoint': '/mapper',
		'restart': 'on-failure',
		'environment': [f'FUNBIZMAP_INSTANCE={idx}', 'FUNBIZMAP_RABBITMQ_IP=rabbitmq', 'FUNBIZMAP_RABBITMQ_PORT=5672', f'FUNBIZMAP_REVIEWS_INPUTS={reviews_inputs}', f'FUNBIZMAP_FUNBIZ_FILTERS={input_yaml["funbiz_filters"]}'],
		'links': ['rabbitmq'],
		'depends_on': list(FUNBIZMAP_DEPS),
		'networks': ['testing_net']
	}

## Weekday Histogram flow.
WEEKDAYAGG_DEPS += ['weekday_histogram_prettier']
file['services']['weekday_histogram_prettier'] = {
	'container_name': 'weekday_histogram_prettier',
	'image': 'weekday_histogram_prettier:latest',
	'entrypoint': '/prettier',
	'restart': 'on-failure',
	'environment': ['HISTOPRE=0', 'HISTOPRE_RABBITMQ_IP=rabbitmq', 'HISTOPRE_RABBITMQ_PORT=5672', f'HISTOPRE_WEEKDAY_AGGREGATORS={input_yaml["weekday_aggregators"]}'],
	'links': ['rabbitmq'],
	'depends_on': list(HISTOPRE_DEPS),
	'networks': ['testing_net']
}

for idx in range(0, input_yaml['weekday_aggregators']):
	container_name = f'weekday_aggregator{idx}'
	WEEKDAYMAP_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'weekday_aggregator:latest',
		'entrypoint': '/aggregator',
		'restart': 'on-failure',
		'environment': [f'WEEKDAYAGG_INSTANCE={idx}', 'WEEKDAYAGG_RABBITMQ_IP=rabbitmq', 'WEEKDAYAGG_RABBITMQ_PORT=5672', f'WEEKDAYAGG_INPUT_TOPIC={idx}', f'WEEKDAYAGG_WEEKDAY_MAPPERS={input_yaml["weekday_mappers"]}'],
		'links': ['rabbitmq'],
		'depends_on': list(WEEKDAYAGG_DEPS),
		'networks': ['testing_net']
	}

for idx in range(0, input_yaml['weekday_mappers']):
	container_name = f'weekday_mapper{idx}'
	RVWSCA_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'weekday_mapper:latest',
		'entrypoint': '/mapper',
		'restart': 'on-failure',
		'environment': [f'WEEKDAYMAP_INSTANCE={idx}', 'WEEKDAYMAP_RABBITMQ_IP=rabbitmq', 'WEEKDAYMAP_RABBITMQ_PORT=5672', f'WEEKDAYMAP_REVIEWS_INPUTS={reviews_inputs}', f'WEEKDAYMAP_WEEKDAY_AGGREGATORS={input_yaml["weekday_aggregators"]}'],
		'links': ['rabbitmq'],
		'depends_on': list(WEEKDAYMAP_DEPS),
		'networks': ['testing_net']
	}

## Top Users flow.
USERFIL_DEPS += ['top_users_prettier']
file['services']['top_users_prettier'] = {
	'container_name': 'top_users_prettier',
	'image': 'top_users_prettier:latest',
	'entrypoint': '/prettier',
	'restart': 'on-failure',
	'environment': ['TOPUSERPRE_RABBITMQ_IP=rabbitmq', 'TOPUSERPRE_RABBITMQ_PORT=5672', f'TOPUSERPRE_USER_FILTERS={input_yaml["user_filters"]}'],
	'links': ['rabbitmq'],
	'depends_on': list(TOPUSERPRE_DEPS),
	'networks': ['testing_net']
}

for idx in range(0, input_yaml['user_filters']):
	container_name = f'user_filter{idx}'
	USERAGG_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'user_filter:latest',
		'entrypoint': '/filter',
		'restart': 'on-failure',
		'environment': [f'USERFIL_INSTANCE={idx}', 'USERFIL_RABBITMQ_IP=rabbitmq', 'USERFIL_RABBITMQ_PORT=5672', f'USERFIL_MIN_REVIEWS={input_yaml["users_min_reviews"]}', f'USERFIL_USER_AGGREGATORS={input_yaml["user_aggregators"]}', f'USERFIL_STARS_JOINERS={input_yaml["bestuser_joiners"]}'],
		'links': ['rabbitmq'],
		'depends_on': list(USERFIL_DEPS),
		'networks': ['testing_net']
	}

for idx in range(0, input_yaml['user_aggregators']):
	container_name = f'user_aggregator{idx}'
	USERMAP_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'user_aggregator:latest',
		'entrypoint': '/aggregator',
		'restart': 'on-failure',
		'environment': [f'USERAGG_INSTANCE={idx}', 'USERAGG_RABBITMQ_IP=rabbitmq', 'USERAGG_RABBITMQ_PORT=5672', f'USERAGG_INPUT_TOPIC={idx}', f'USERAGG_USER_MAPPERS={input_yaml["user_mappers"]}', f'USERAGG_USER_FILTERS={input_yaml["user_filters"]}', f'USERAGG_BOTUSER_FILTERS={input_yaml["botuser_filters"]}'],
		'links': ['rabbitmq'],
		'depends_on': list(USERAGG_DEPS),
		'networks': ['testing_net']
	}

for idx in range(0, input_yaml['user_mappers']):
	container_name = f'user_mapper{idx}'
	RVWSCA_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'user_mapper:latest',
		'entrypoint': '/mapper',
		'restart': 'on-failure',
		'environment': [f'USERMAP_INSTANCE={idx}', 'USERMAP_RABBITMQ_IP=rabbitmq', 'USERMAP_RABBITMQ_PORT=5672', f'USERMAP_REVIEWS_INPUTS={reviews_inputs}', f'USERMAP_USER_AGGREGATORS={input_yaml["user_aggregators"]}'],
		'links': ['rabbitmq'],
		'depends_on': list(USERMAP_DEPS),
		'networks': ['testing_net']
	}

## Best Users flow.
BESTUSERJOIN_DEPS += ['best_users_prettier']
file['services']['best_users_prettier'] = {
	'container_name': 'best_users_prettier',
	'image': 'best_users_prettier:latest',
	'entrypoint': '/prettier',
	'restart': 'on-failure',
	'environment': ['BESTUSERPRE_RABBITMQ_IP=rabbitmq', 'BESTUSERPRE_RABBITMQ_PORT=5672', f'BESTUSERPRE_BESTUSER_JOINERS={input_yaml["bestuser_joiners"]}'],
	'links': ['rabbitmq'],
	'depends_on': list(BESTUSERPRE_DEPS),
	'networks': ['testing_net']
}

for idx in range(0, input_yaml['bestuser_joiners']):
	container_name = f'bestuser_joiner{idx}'
	USERFIL_DEPS += [container_name]
	STARSAGG_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'bestuser_joiner:latest',
		'entrypoint': '/joiner',
		'restart': 'on-failure',
		'environment': [f'BESTUSERJOIN_INSTANCE={idx}', 'BESTUSERJOIN_RABBITMQ_IP=rabbitmq', 'BESTUSERJOIN_RABBITMQ_PORT=5672', f'BESTUSERJOIN_INPUT_TOPIC={idx}', f'BESTUSERJOIN_STARS_AGGREGATORS={input_yaml["stars_aggregators"]}', f'BESTUSERJOIN_USER_FILTERS={input_yaml["user_filters"]}'],
		'links': ['rabbitmq'],
		'depends_on': list(BESTUSERJOIN_DEPS),
		'networks': ['testing_net']
	}

for idx in range(0, input_yaml['stars_aggregators']):
	container_name = f'stars_aggregator{idx}'
	STARSFIL_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'stars_aggregator:latest',
		'entrypoint': '/aggregator',
		'restart': 'on-failure',
		'environment': [f'STARSAGG_INSTANCE={idx}', 'STARSAGG_RABBITMQ_IP=rabbitmq', 'STARSAGG_RABBITMQ_PORT=5672', f'STARSAGG_INPUT_TOPIC={idx}', f'STARSAGG_STARS_FILTERS={input_yaml["stars_filters"]}', f'STARSAGG_STARS_JOINERS={input_yaml["bestuser_joiners"]}'],
		'links': ['rabbitmq'],
		'depends_on': list(STARSAGG_DEPS),
		'networks': ['testing_net']
	}

for idx in range(0, input_yaml['stars_filters']):
	container_name = f'stars_filter{idx}'
	STARSMAP_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'stars_filter:latest',
		'entrypoint': '/filter',
		'restart': 'on-failure',
		'environment': [f'STARSFIL_INSTANCE={idx}', 'STARSFIL_RABBITMQ_IP=rabbitmq', 'STARSFIL_RABBITMQ_PORT=5672', f'STARSFIL_STARS_MAPPERS={input_yaml["stars_mappers"]}', f'STARSFIL_STARS_AGGREGATORS={input_yaml["stars_aggregators"]}'],
		'links': ['rabbitmq'],
		'depends_on': list(STARSFIL_DEPS),
		'networks': ['testing_net']
	}

for idx in range(0, input_yaml['stars_mappers']):
	container_name = f'stars_mapper{idx}'
	RVWSCA_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'stars_mapper:latest',
		'entrypoint': '/mapper',
		'restart': 'on-failure',
		'environment': [f'STARSMAP_INSTANCE={idx}', 'STARSMAP_RABBITMQ_IP=rabbitmq', 'STARSMAP_RABBITMQ_PORT=5672', f'STARSMAP_REVIEWS_INPUTS={reviews_inputs}', f'STARSMAP_STARS_FILTERS={input_yaml["stars_filters"]}'],
		'links': ['rabbitmq'],
		'depends_on': list(STARSMAP_DEPS),
		'networks': ['testing_net']
	}

# Bot Users flow.
for idx in range(0, input_yaml['dishash_filters']):
	container_name = f'dishash_filter{idx}'
	DISHASHAGG_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'dishash_filter:latest',
		'entrypoint': '/filter',
		'restart': 'on-failure',
		'environment': [f'DISHASHFIL_INSTANCE={idx}', 'DISHASHFIL_RABBITMQ_IP=rabbitmq', 'DISHASHFIL_RABBITMQ_PORT=5672', f'DISHASHFIL_DISHASH_AGGREGATORS={input_yaml["dishash_aggregators"]}', f'DISHASHFIL_DISHASH_JOINERS={input_yaml["dishash_joiners"]}'],
		'links': ['rabbitmq'],
		'depends_on': list(DISHASHFIL_DEPS),
		'networks': ['testing_net']
	}

for idx in range(0, input_yaml['dishash_aggregators']):
	container_name = f'dishash_aggregator{idx}'
	HASHAGG_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'dishash_aggregator:latest',
		'entrypoint': '/aggregator',
		'restart': 'on-failure',
		'environment': [f'DISHASHAGG_INSTANCE={idx}', 'DISHASHAGG_RABBITMQ_IP=rabbitmq', 'DISHASHAGG_RABBITMQ_PORT=5672', f'DISHASHAGG_INPUT_TOPIC={idx}', f'DISHASHAGG_HASH_AGGREGATORS={input_yaml["hash_aggregators"]}', f'DISHASHAGG_DISHASH_FILTERS={input_yaml["dishash_filters"]}'],
		'links': ['rabbitmq'],
		'depends_on': list(DISHASHAGG_DEPS),
		'networks': ['testing_net']
	}

for idx in range(0, input_yaml['hash_aggregators']):
	container_name = f'hash_aggregator{idx}'
	HASHMAP_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'hash_aggregator:latest',
		'entrypoint': '/aggregator',
		'restart': 'on-failure',
		'environment': [f'HASHAGG_INSTANCE={idx}', 'HASHAGG_RABBITMQ_IP=rabbitmq', 'HASHAGG_RABBITMQ_PORT=5672', f'HASHAGG_INPUT_TOPIC={idx}', f'HASHAGG_HASH_MAPPERS={input_yaml["hash_mappers"]}', f'HASHAGG_DISHASH_AGGREGATORS={input_yaml["dishash_aggregators"]}'],
		'links': ['rabbitmq'],
		'depends_on': list(HASHAGG_DEPS),
		'networks': ['testing_net']
	}

for idx in range(0, input_yaml['hash_mappers']):
	container_name = f'hash_mapper{idx}'
	RVWSCA_DEPS += [container_name]
	file['services'][container_name] = {
		'container_name': container_name,
		'image': 'hash_mapper:latest',
		'entrypoint': '/mapper',
		'restart': 'on-failure',
		'environment': [f'HASHMAP_INSTANCE={idx}', 'HASHMAP_RABBITMQ_IP=rabbitmq', 'HASHMAP_RABBITMQ_PORT=5672', f'HASHMAP_REVIEWS_INPUTS={reviews_inputs}', f'HASHMAP_HASH_AGGREGATORS={input_yaml["hash_aggregators"]}'],
		'links': ['rabbitmq'],
		'depends_on': list(HASHMAP_DEPS),
		'networks': ['testing_net']
	}

## Reviews Scatter
file['services']['rvw_scatter'] = {
	'container_name': 'rvw_scatter',
	'image': 'rvw_scatter:latest',
	'entrypoint': '/scatter',
	'restart': 'on-failure',
	'environment': ['RVWSCA_INSTANCE=0', 'RVWSCA_REVIEWS_DATA=/data/test-reviews.json', 'RVWSCA_RABBITMQ_IP=rabbitmq', 'RVWSCA_RABBITMQ_PORT=5672', f'RVWSCA_FUNBIZ_MAPPERS={input_yaml["funbiz_mappers"]}', f'RVWSCA_WEEKDAYS_MAPPERS={input_yaml["weekday_mappers"]}', f'RVWSCA_HASHES_MAPPERS={input_yaml["hash_mappers"]}', f'RVWSCA_USERS_MAPPERS={input_yaml["user_mappers"]}', f'RVWSCA_STARS_MAPPERS={input_yaml["stars_mappers"]}'],
	'links': ['rabbitmq'],
	'depends_on': list(RVWSCA_DEPS),
	'networks': ['testing_net'],
	'volumes': ['reviews_dataset:/data']
}

if input_yaml['reviews_streaming']:
	file['services']['rvw_streaming'] = {
		'container_name': 'rvw_streaming',
		'image': 'rvw_streaming:latest',
		'entrypoint': '/streaming',
		'restart': 'on-failure',
		'environment': ['RVWSTR_INSTANCE=1', 'RVWSTR_RABBITMQ_IP=rabbitmq', 'RVWSTR_RABBITMQ_PORT=5672', f'RVWSTR_FUNBIZ_MAPPERS={input_yaml["funbiz_mappers"]}', f'RVWSTR_WEEKDAYS_MAPPERS={input_yaml["weekday_mappers"]}', f'RVWSTR_HASHES_MAPPERS={input_yaml["hash_mappers"]}', f'RVWSTR_USERS_MAPPERS={input_yaml["user_mappers"]}', f'RVWSTR_STARS_MAPPERS={input_yaml["stars_mappers"]}'],
		'links': ['rabbitmq'],
		'depends_on': list(RVWSCA_DEPS),
		'networks': ['testing_net'],
	}


#### VOLUMES
file['volumes'] = {
	'reviews_dataset': {
		'driver': 'local',
		'driver_opts': {
			'type': 'none',
			'device': '$PWD/datasets/reviews',
			'o': 'bind'
		}
	},
	'business_dataset': {
		'driver': 'local',
		'driver_opts': {
			'type': 'none',
			'device': '$PWD/datasets/business',
			'o': 'bind'
		}
	}
}

#### NETWORK
file['networks'] = {
	'testing_net': {
		'ipam': {
			'driver': 'default', 
			'config': [
				{'subnet': '172.25.125.0/24'}
			]
		}
	}
}

with open('docker-compose-dev.yaml', 'w') as outfile:
    yaml.dump(file, outfile, default_flow_style=False)
